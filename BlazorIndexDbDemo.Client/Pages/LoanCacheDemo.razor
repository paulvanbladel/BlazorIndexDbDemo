@page "/loans-cache"
@using BlazorIndexDbDemo.Client.Data
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<PageTitle>Loan Cache Demo</PageTitle>

<h3>Loan Cache Demo (IndexedDB)</h3>

<div class="mb-3">
    <button class="btn btn-primary me-2" @onclick="LoadLoansFromServer" disabled="@isLoading">
        @if (isLoading && operationType == "server")
        {
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        }
        Load Loans from API & Cache
    </button>
    <button class="btn btn-secondary me-2" @onclick="LoadLoansFromCache" disabled="@isLoading">
        @if (isLoading && operationType == "cache")
        {
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        }
        Load Loans from IndexedDB Cache
    </button>
    <button class="btn btn-danger" @onclick="ClearCache" disabled="@isLoading">
        @if (isLoading && operationType == "clear")
        {
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        }
        Clear IndexedDB Cache
    </button>
</div>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @statusMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @errorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (loans is not null && loans.Count > 0)
{
    <div class="mt-3">
        <h5>Displaying all @loans.Count loans</h5>
        <p class="text-muted">Data is cached in browser IndexedDB and persists across page refreshes. Using QuickGrid with virtualization for optimal performance.</p>
        
        <div class="grid-container" style="height: 600px; overflow: auto; border: 1px solid #dee2e6; border-radius: 0.375rem;">
            <QuickGrid Items="@loans.AsQueryable()" Virtualize="true" Pagination="@pagination">
                <PropertyColumn Property="@(l => l.Id)" Sortable="true" />
                <PropertyColumn Property="@(l => l.Name)" Sortable="true" />
                <PropertyColumn Property="@(l => l.Amount)" Format="C" Sortable="true" />
                <PropertyColumn Property="@(l => l.InterestRate)" Format="P2" Sortable="true" />
            </QuickGrid>
        </div>
        
        <Paginator State="@pagination" />
    </div>
}
else if (loans is not null)
{
    <div class="alert alert-warning">No loans found in cache. Try loading from API first.</div>
}

@code {
    List<Loan>? loans;
    bool isLoading = false;
    string operationType = "";
    string statusMessage = "";
    string errorMessage = "";
    PaginationState pagination = new PaginationState { ItemsPerPage = 25 };

    async Task LoadLoansFromServer()
    {
        isLoading = true;
        operationType = "server";
        statusMessage = "";
        errorMessage = "";
        StateHasChanged();

        try
        {
            loans = await Http.GetFromJsonAsync<List<Loan>>("api/loans") ?? [];

            // Clear existing data and save to IndexedDB
            await JSRuntime.InvokeVoidAsync("loanCacheDB.clearLoans");
            await JSRuntime.InvokeVoidAsync("loanCacheDB.addLoans", loans);

            statusMessage = $"Successfully loaded and cached {loans.Count} loans from API to IndexedDB.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading loans from server: {ex.Message}";
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
            operationType = "";
            StateHasChanged();
        }
    }

    async Task LoadLoansFromCache()
    {
        isLoading = true;
        operationType = "cache";
        statusMessage = "";
        errorMessage = "";
        StateHasChanged();

        try
        {
            var cachedLoans = await JSRuntime.InvokeAsync<Loan[]>("loanCacheDB.getAllLoans");
            loans = cachedLoans?.ToList() ?? new List<Loan>();
            
            statusMessage = $"Successfully loaded {loans.Count} loans from IndexedDB cache.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading loans from cache: {ex.Message}";
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
            operationType = "";
            StateHasChanged();
        }
    }

    async Task ClearCache()
    {
        isLoading = true;
        operationType = "clear";
        statusMessage = "";
        errorMessage = "";
        StateHasChanged();

        try
        {
            await JSRuntime.InvokeVoidAsync("loanCacheDB.clearLoans");
            loans = null;
            statusMessage = "Successfully cleared IndexedDB cache.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error clearing cache: {ex.Message}";
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
            operationType = "";
            StateHasChanged();
        }
    }
}