@page "/loans-cache"
@using BlazorIndexDbDemo.Client.Data
@using BlazorIndexDbDemo.Client.Services
@using System.Text.Json
@inject ILoanCacheService CacheService
@inject HttpClient Http

<PageTitle>Loan Cache Demo</PageTitle>

<h3>Loan Cache Demo with Smart Cache Invalidation</h3>

<div class="mb-3">
    <button class="btn btn-primary me-2" @onclick="LoadLoansFromServer" disabled="@isLoading">
        @if (isLoading && operationType == "server")
        {
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        }
        Load Fresh from API (2s delay)
    </button>
    <button class="btn btn-success me-2" @onclick="LoadLoansWithValidation" disabled="@isLoading">
        @if (isLoading && operationType == "smart")
        {
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        }
        Smart Load (Cache + Validation)
    </button>
    <button class="btn btn-secondary me-2" @onclick="LoadLoansFromCache" disabled="@isLoading">
        @if (isLoading && operationType == "cache")
        {
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        }
        Force Load from Cache
    </button>
    <button class="btn btn-danger me-2" @onclick="ClearCache" disabled="@isLoading">
        @if (isLoading && operationType == "clear")
        {
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        }
        Clear Cache
    </button>
</div>

<div class="mb-3">
    <h5>Demo Controls:</h5>
    <button class="btn btn-warning me-2" @onclick="InvalidateServerCache" disabled="@isLoading">
        @if (isLoading && operationType == "invalidate")
        {
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        }
        üîÑ Simulate Data Change
    </button>
    <button class="btn btn-info me-2" @onclick="CheckServerVersion" disabled="@isLoading">
        @if (isLoading && operationType == "version")
        {
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        }
        üìã Check Server Version
    </button>
</div>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @statusMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @errorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (!string.IsNullOrEmpty(cacheInfo))
{
    <div class="alert alert-info alert-dismissible fade show" role="alert">
        <strong>Cache Info:</strong> @cacheInfo
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (loans is not null && loans.Count > 0)
{
    <div class="mt-3">
        <h5>Displaying all @loans.Count loans</h5>
        <p class="text-muted">
            Data cached with version-based validation. Smart loading checks cache validity before use.
            @if (!string.IsNullOrEmpty(lastDataSource))
            {
                <br><strong>Last loaded from:</strong> @lastDataSource
            }
        </p>
        
        <div class="grid-container" style="height: 600px; overflow: auto; border: 1px solid #dee2e6; border-radius: 0.375rem;">
            <QuickGrid Items="@loans.AsQueryable()" Virtualize="true" Pagination="@pagination">
                <PropertyColumn Property="@(l => l.Id)" Sortable="true" />
                <PropertyColumn Property="@(l => l.Name)" Sortable="true" />
                <PropertyColumn Property="@(l => l.Amount)" Format="C" Sortable="true" />
                <PropertyColumn Property="@(l => l.InterestRate)" Format="P2" Sortable="true" />
            </QuickGrid>
        </div>
        
        <Paginator State="@pagination" />
    </div>
}
else if (loans is not null)
{
    <div class="alert alert-warning">No loans found. Try loading data first.</div>
}

@code {
    List<Loan>? loans;
    bool isLoading = false;
    string operationType = "";
    string statusMessage = "";
    string errorMessage = "";
    string cacheInfo = "";
    string lastDataSource = "";
    PaginationState pagination = new PaginationState { ItemsPerPage = 25 };

    async Task LoadLoansFromServer()
    {
        isLoading = true;
        operationType = "server";
        statusMessage = "";
        errorMessage = "";
        cacheInfo = "";
        StateHasChanged();

        try
        {
            var envelope = await Http.GetFromJsonAsync<LoanEnvelope>("api/loans");
            if (envelope != null)
            {
                loans = envelope.Data.ToList();
                
                // Store the envelope in IndexedDB using the new service
                await CacheService.StoreLoanEnvelopeAsync(envelope);
                
                lastDataSource = "üåê API Server";
                statusMessage = $"Successfully loaded and cached {loans.Count} loans from API. Version: {envelope.Version}";
                cacheInfo = $"Cache updated with version {envelope.Version} at {envelope.Timestamp:HH:mm:ss}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading loans from server: {ex.Message}";
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
            operationType = "";
            StateHasChanged();
        }
    }

    async Task LoadLoansWithValidation()
    {
        isLoading = true;
        operationType = "smart";
        statusMessage = "";
        errorMessage = "";
        cacheInfo = "";
        StateHasChanged();

        try
        {
            // First, check if we have cached data
            var cachedVersion = await CacheService.GetCachedVersionAsync();
            
            if (string.IsNullOrEmpty(cachedVersion))
            {
                // No cached data, load from server
                statusMessage = "No cached data found. Loading from server...";
                StateHasChanged();
                await LoadLoansFromServer();
                return;
            }

            // Validate cached version with server
            var validation = await Http.GetFromJsonAsync<CacheValidationResponse>($"api/loans/validate?version={cachedVersion}");
            
            if (validation?.IsValid == true)
            {
                // Cache is valid, use cached data
                loans = await CacheService.GetAllLoansAsync();
                
                var metadata = await CacheService.GetCachedMetadataAsync();
                
                lastDataSource = "üíæ IndexedDB Cache (validated)";
                statusMessage = $"‚úÖ Cache is valid! Loaded {loans.Count} loans from cache.";
                cacheInfo = $"Cache version {cachedVersion} validated as current";
            }
            else
            {
                // Cache is invalid, load from server
                statusMessage = "‚ùå Cache is outdated. Loading fresh data from server...";
                StateHasChanged();
                await LoadLoansFromServer();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error during smart loading: {ex.Message}. Falling back to server.";
            Console.WriteLine(ex);
            await LoadLoansFromServer();
        }
        finally
        {
            isLoading = false;
            operationType = "";
            StateHasChanged();
        }
    }

    async Task LoadLoansFromCache()
    {
        isLoading = true;
        operationType = "cache";
        statusMessage = "";
        errorMessage = "";
        cacheInfo = "";
        StateHasChanged();

        try
        {
            loans = await CacheService.GetAllLoansAsync();
            
            var cachedVersion = await CacheService.GetCachedVersionAsync();
            
            lastDataSource = "üíæ IndexedDB Cache (forced)";
            statusMessage = $"Loaded {loans.Count} loans from IndexedDB cache.";
            
            if (!string.IsNullOrEmpty(cachedVersion))
            {
                cacheInfo = $"Cache version: {cachedVersion} (not validated)";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading loans from cache: {ex.Message}";
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
            operationType = "";
            StateHasChanged();
        }
    }

    async Task ClearCache()
    {
        isLoading = true;
        operationType = "clear";
        statusMessage = "";
        errorMessage = "";
        cacheInfo = "";
        StateHasChanged();

        try
        {
            await CacheService.ClearLoansAsync();
            loans = null;
            lastDataSource = "";
            statusMessage = "Successfully cleared IndexedDB cache.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error clearing cache: {ex.Message}";
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
            operationType = "";
            StateHasChanged();
        }
    }

    async Task InvalidateServerCache()
    {
        isLoading = true;
        operationType = "invalidate";
        statusMessage = "";
        errorMessage = "";
        StateHasChanged();

        try
        {
            var response = await Http.PostAsync("api/loanconfig/invalidate", null);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<dynamic>();
                statusMessage = "üîÑ Server cache invalidated! New data version available.";
                cacheInfo = "Your cached data is now outdated. Use 'Smart Load' to see the difference.";
            }
            else
            {
                errorMessage = "Failed to invalidate server cache.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error invalidating cache: {ex.Message}";
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
            operationType = "";
            StateHasChanged();
        }
    }

    async Task CheckServerVersion()
    {
        isLoading = true;
        operationType = "version";
        statusMessage = "";
        errorMessage = "";
        StateHasChanged();

        try
        {
            var response = await Http.GetFromJsonAsync<JsonElement>("api/loanconfig/version");
            var cachedVersion = await CacheService.GetCachedVersionAsync();
            
            if (response.ValueKind != JsonValueKind.Undefined && response.TryGetProperty("version", out var versionProperty))
            {
                var serverVersion = versionProperty.GetString();
                var isMatch = !string.IsNullOrEmpty(serverVersion) && !string.IsNullOrEmpty(cachedVersion) && serverVersion == cachedVersion;
                
                statusMessage = $"üìã Server version: {serverVersion}";
                cacheInfo = $"Cached version: {cachedVersion ?? "None"} - {(isMatch ? "‚úÖ Match" : "‚ùå Mismatch")}";
            }
            else
            {
                errorMessage = "Invalid response from server";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error checking server version: {ex.Message}";
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
            operationType = "";
            StateHasChanged();
        }
    }
}